void IdleESNcalc(void *custom)
{
	
	Esn< 2, 2, 40,float> esn0(0.20, 0.95); //esn(0.20, 0.95);
	Esn< 2, 2, 40, float > esn1(0.20, 0.95);// esn1(0.20, 0.95); 
	
	//time_t rawtime;
   	//struct tm * timeinfo;

	int numsteps = 2000;
	double k = 0.0;
	double random = 0.0;
	int loopcount = 0;
	int i = 0;

	
	//esn 0 variables
	double tempaccelerationprediction0 = 0.0;
	double tempturningprediction0 = 0.0;
	double arrowpostionx0 = gArrowPositionX;
	double arrowpositiony0 = gArrowPositionY;
	double ArrowSpeedX0 = gArrowSpeedX;
	double ArrowSpeedY0 = gArrowSpeedY;
	double theta0 = gTheta;
	double result0 = 0.0;
	
	//esn 1 variables
	double tempaccelerationprediction1 = 0.0;
	double tempturningprediction1 = 0.0;
	double arrowpostionx1 = gArrowPositionX;
	double arrowpositiony1 = gArrowPositionY;
	double ArrowSpeedX1 = gArrowSpeedX;
	double ArrowSpeedY1 = gArrowSpeedY;
	double theta1 = gTheta;
	double result1 = 0.0;
	
	//double previousspeedprediction = 0.0;
	//double previousdistanceprediction = 0.0;
	
	//double relativedistance = 0.0;
	
	double currentdistance = 0.0;
	
	printf("SSSSSSSSSSSSSSSSSSSSSSSSSS\n");
	printf("TTTTTTTTTTTTTTTTTTTTTTTTTT\n");
	printf("AAAAAAAAAAAAAAAAAAAAAAAAAA\n");
	printf("RRRRRRRRRRRRRRRRRRRRRRRRRR\n");
	printf("TTTTTTTTTTTTTTTTTTTTTTTTTT\n");


		
	/*CalculateArrowHeadPos(&gArrowPositionX, &gArrowPositionY, &gArrowHeadPositionX, &gArrowHeadPositionY, gTheta);
	currentdistance = CalculateDistance(gArrowHeadPositionX, gArrowHeadPositionY, gTargetPositionX, gTargetPositionY);
	
	gRelativedistance = CalculateReward(gInitialDistance, currentdistance);*/

	
	/*
		loop(i, 0, numSteps){
		esn.Input(0, value);
		//esn.Input(1, 2*R().Float() - 1);
		esn.Update();
		double prediction = esn.Output(0);
		esn.TrainPrevious(0, target, fmax(0, 2.0*(1.0 - float(i)/(numSteps - numGraph))) );			
		
		value = target;
		mg.Step();
		target = mg.Value();
	*/
	
	//calculate the initial distance between the arrow head and the target
	CalculateArrowHeadPos(&gArrowPositionX, &gArrowPositionY, &gArrowHeadPositionX, &gArrowHeadPositionY, gTheta);
	gInitialDistance = CalculateDistance(gArrowHeadPositionX, gArrowHeadPositionY, gTargetPositionX, gTargetPositionY);
	printf("gInitialDistance is %lf\n",gInitialDistance);

	

	while(1)	
	//loop(i, 0, numsteps)
	//for(loopcount = 0; loopcount < numsteps; loopcount++)
	{
		loopcount++;
		printf("loopcount is %i\n",loopcount);

		//resetting variables here for next use of this loop
		tempaccelerationprediction0 = 0.0;
		tempturningprediction0  = 0.0;
		tempaccelerationprediction1 = 0.0;
		tempturningprediction1 = 0.0;
		ArrowSpeedX0 = gArrowSpeedX;
		ArrowSpeedY0 = gArrowSpeedY;
		ArrowSpeedX1 = gArrowSpeedX;
		ArrowSpeedY1 = gArrowSpeedY;
		theta0 = gTheta;
		theta1 = gTheta;
		
		k = k+0.01;
		if(k > 1)
		{
			k =1;
		}
		printf("k is %lf\n",k);

		
			
		//stuff that needs to be calculated every loop	
		//calculating the new distance after a interation of a loop between the arrow head and the target
		CalculateArrowHeadPos(&gArrowPositionX, &gArrowPositionY, &gArrowHeadPositionX, &gArrowHeadPositionY, gTheta);
		currentdistance = CalculateDistance(gArrowHeadPositionX, gArrowHeadPositionY, gTargetPositionX, gTargetPositionY);
	
		gRelativedistance = CalculateRelativeDistance(gInitialDistance, currentdistance);
		gdistance.push_back(gRelativedistance);
		printf("gRelativedistance is %lf\n",gRelativedistance);


		
		//gSpeed = sqrt( ((int) gArrowSpeedX)^2+( (int) gArrowSpeedY)^2);
		gSpeed = gArrowSpeedY/(sin((gTheta*3.14/180)));
		if(gSpeed > 10)
		{
			gSpeed = 10;
		}
		if(gSpeed < 0)
		{
			gSpeed = 0;
		}
		printf("gSpeed is %lf\n",gSpeed);

		
		esn1 = esn0;		
		
		//connect esn 0 network
		esn0.Input(0, (gSpeed/10));
		esn0.Input(1, gRelativedistance);
	
		esn0.Update();
		
		tempaccelerationprediction0 = esn0.Output(0);
		printf("before ESN evaluation tempaccelerationprediction 0 is %lf\n",tempaccelerationprediction0);

		tempturningprediction0 = esn0.Output(1);
		printf("before ESN evaluation tempturningprediction0 0 is %lf\n",tempturningprediction0);

		
		random = -1.0+double(2.0*rand()/(RAND_MAX + 1.0));
		printf("random is is %lf\n",random);
		
		tempaccelerationprediction0 = tanh(k*tempaccelerationprediction0 + (1-k)*random);
		printf("before ESN evaluation+TANH+RANDOM tempaccelerationprediction 0 is %lf\n",tempaccelerationprediction0);

		//n=(rand()%(max-min+1))+min;
		//lowest+float(range*rand()/(RAND_MAX + 1.0));
		random = -1.0+double(2.0*rand()/(RAND_MAX + 1.0));
		printf("random is is %lf\n",random);

		tempturningprediction0 = tanh(k*tempturningprediction0 + (1-k)*random);
		printf("before ESN evaluation+TANH+RANDOM tempturningprediction0 0 is %lf\n",tempturningprediction0);


		
		//evaluating ESN 0's results
		if (tempturningprediction0 > 0)
		{
			RotateClockwise(&theta0);
		}
		if (tempturningprediction0 < 0)
		{
			RotateAntiClockwise(&theta0);
		}
		
		if (tempaccelerationprediction0 > 0)
		{
			for(i = 0; i < ((int)(tempaccelerationprediction0*10+0.5)); i++)
			{
				IncreaseSpeed(&gArrowSpeed);
				UpdateSpeedVector(&gArrowSpeed,&ArrowSpeedX0,&ArrowSpeedY0,theta0);
			}
			gArrowSpeed = 0;
		}
		
		//implemeting the evaluated results
		MoveInSpeedVectorDirectionNew(&arrowpostionx0,&arrowpositiony0,&ArrowSpeedX0,&ArrowSpeedY0);
		
		CalculateArrowHeadPos(&arrowpostionx0, &arrowpositiony0, &gArrowHeadPositionX, &gArrowHeadPositionY, theta0);
		currentdistance = CalculateDistance(gArrowHeadPositionX, gArrowHeadPositionY, gTargetPositionX, gTargetPositionY);
		
		result0 = CalculateRelativeDistance(gInitialDistance, currentdistance);


		
		//connect esn 1 network
		esn1.Input(0, (gSpeed/10));
		esn1.Input(1, gRelativedistance);
	
		esn1.Update();
		
		tempaccelerationprediction1 = esn1.Output(0);
		tempturningprediction1 = esn1.Output(1);
		
		random = -1.0+double(2.0*rand()/(RAND_MAX + 1.0));
		tempaccelerationprediction1 = tanh(k*tempaccelerationprediction1 + (1-k)*random);
		random = -1.0+double(2.0*rand()/(RAND_MAX + 1.0));
		tempturningprediction1 = tanh(k*tempturningprediction1 + (1-k)*random);
		
		//evaluating ESN 1's results
		if (tempturningprediction1 > 0)
		{
			RotateClockwise(&theta1);
		}
		if (tempturningprediction1 < 0)
		{
			RotateAntiClockwise(&theta1);
		}
		
		if (tempaccelerationprediction1 > 0)
		{
			for(i = 0; i < ((int)(tempaccelerationprediction1*10+0.5)); i++)
			{
				IncreaseSpeed(&gArrowSpeed);
				UpdateSpeedVector(&gArrowSpeed,&ArrowSpeedX1,&ArrowSpeedY1,theta1);
			}
			gArrowSpeed = 0;
		}
		
		//implemeting the evaluated results
		MoveInSpeedVectorDirectionNew(&arrowpostionx1,&arrowpositiony1,&ArrowSpeedX1,&ArrowSpeedY1);
		
		CalculateArrowHeadPos(&arrowpostionx1, &arrowpositiony1, &gArrowHeadPositionX, &gArrowHeadPositionY, theta1);
		currentdistance = CalculateDistance(gArrowHeadPositionX, gArrowHeadPositionY, gTargetPositionX, gTargetPositionY);
		
		result1 = CalculateRelativeDistance(gInitialDistance, currentdistance);

		
		//now evaluate which esn produced a better result...
		if(result0 > result1)
		{
			esn0.TrainPrevious(0, tempaccelerationprediction0, 1.0 ); //fmax(0, 2.0*(1.0 - float(i)/(numSteps - numGraph)))
			esn0.TrainPrevious(1, tempturningprediction0, 1.0 ); 
			UpdateSpeedVector(&gArrowSpeed,&ArrowSpeedX0,&ArrowSpeedY0,theta0);
			//gArrowSpeedX = ArrowSpeedX0;
			//gArrowSpeedY = ArrowSpeedY0;
			//gTheta = theta0;
			//UpdateSpeedVector(&gArrowSpeed,&gArrowSpeedX,&gArrowSpeedY,gTheta);	
			
			printf("ESN 0 wins! with a result of %lf\n",result0);
			printf("temp acceleration prediction 0 is %lf\n",tempaccelerationprediction0);
			printf("temp turning prediction 0 is %lf\n",tempturningprediction0);
			

		}
		if(result1 > result0)
		{
			esn0 = esn1;
			esn0.TrainPrevious(0, tempaccelerationprediction1, 1.0 ); //fmax(0, 2.0*(1.0 - float(i)/(numSteps - numGraph)))
			esn0.TrainPrevious(1, tempturningprediction1, 1.0 ); 
			UpdateSpeedVector(&gArrowSpeed,&ArrowSpeedX1,&ArrowSpeedY1,theta1);
			gArrowSpeedX = ArrowSpeedX1;
			gArrowSpeedY = ArrowSpeedY1;
			gTheta = theta1;
			
			printf("ESN 1 wins! with a result of %lf\n",result1);
			printf("temp acceleration prediction 1 is %lf\n",tempaccelerationprediction1);
			printf("temp turning prediction 1 is %lf\n",tempturningprediction1);
		}
		if(result0 == result1)
		{
			printf("NO winner\n");			

			esn0.TrainPrevious(0, tempaccelerationprediction0, 1.0 ); //fmax(0, 2.0*(1.0 - float(i)/(numSteps - numGraph)))
			esn0.TrainPrevious(1, tempturningprediction0, 1.0 ); 
			UpdateSpeedVector(&gArrowSpeed,&ArrowSpeedX0,&ArrowSpeedY0,theta0);
			gArrowSpeedX = ArrowSpeedX0;
			gArrowSpeedY = ArrowSpeedY0;
			gTheta = theta0;
		}	//UpdateSpeedVect	
		printf("***********************************\n");
		sleep(1);
		atto_redraw();
		sleep(1);

		

	
		
	
	}
	/*
	Gnuplot::set_GNUPlotPath("/Applications/Gnuplot.app/Contents/Resources/bin");
	Gnuplot gp2;
	gp2.set_style("lines");
	gp2.plot_x(gdistance);
	gp2.showonscreen();
	sleep(1);
	*/
	printf("process complete\n");

	
}

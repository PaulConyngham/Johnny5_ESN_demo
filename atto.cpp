// generated by Fast Light User Interface Designer (fluid) version 1.0107

#include "atto.h"
#include <FL/Fl_GIF_Image.H>

void atto_color(float r, float g, float b) {
	fl_color((int)(255.0 * r), (int)(255.0 * g), (int)(255.0 * b));
}

void atto_frame(int left, int top, int w, int h) {
	fl_rect(gAttoArea->x() + left, gAttoArea->y() + top, w, h);
}

void atto_fill(int left, int top, int w, int h) {
	fl_rectf(gAttoArea->x() + left, gAttoArea->y() + top, w, h);
}

void atto_line(int x1, int y1, int x2, int y2) {
	fl_line(gAttoArea->x() + x1, gAttoArea->y() + y1, gAttoArea->x() + x2, gAttoArea->y() + y2);
}

void atto_measure_string(const char *string, int *w, int *h) {
	int W = 0;
	int H = 0;
	fl_measure(string, W, H, 0);
	if(w){ *w = W; }
	if(h){ *h = H; }
}

void atto_string(int left, int baseline, const char *string) {
	fl_draw(string, gAttoArea->x() + left, gAttoArea->y() + baseline);
}

void atto_gif(int left, int top, const char *path_to_image) {
	Fl_GIF_Image image(path_to_image);
	image.draw(gAttoArea->x() + left, gAttoArea->y() + top);
}

void atto_redraw() {
	gAttoArea->redraw();
}

void atto_arc(int left, int top, int w, int h, double angle1, double angle2) {
	fl_arc(gAttoArea->x() + left, gAttoArea->y() + top, w, h, angle1, angle2);
}

void atto_timeout(float secs_from_now, AttoGenericFunction f, void *custom){
	Fl::add_timeout(secs_from_now, f, custom);
}

void atto_idle_start(AttoGenericFunction f, void *custom){
	Fl::add_idle(f, custom);
}

void atto_idle_end(AttoGenericFunction f){
	Fl::remove_idle(f);
}

int atto_key_is_down(int code){
	return Fl::get_key(code);
}

void atto_get_mouse(int *x, int *y){
	Fl::get_mouse(*x, *y);
	*x -= gAttoArea->x();
	*y -= gAttoArea->y();
	// translate to window relative coordinates
	*x -= Fl::event_x_root() - Fl::event_x();
	*y -= Fl::event_y_root() - Fl::event_y();
}

void atto_message(const char *string){
	fl_message(string); // note this is really a printf formatting string so % will be interpreted by printf
	atto_redraw();
}

const char *atto_input(const char *prompt, const char *default_string){
	// note 'prompt' is really a printf formatting string so % will be interpreted by printf
	const char *result = fl_input(prompt, default_string);
	atto_redraw();
	return result;
}

int atto_choice(const char *question, const char *option0, const char *option1, const char *option2){
	int result = fl_choice(question, option0, option1, option2);
	atto_redraw();
	return result;
}

const char *atto_file_chooser(const char *prompt, const char *tabSeparatedPatterns){
	const char *result = fl_file_chooser(prompt, tabSeparatedPatterns, 0);
	atto_redraw();
	return result;
}

const char *atto_dir_chooser(const char *prompt){
	const char *result =  fl_dir_chooser(prompt, 0);
	atto_redraw();
	return result;
}

int atto_color_chooser(const char *title, float *r, float *g, float *b){
	double dr, dg, db;
	int result = fl_color_chooser(title, dr, dg, db);
	*r = (float)dr;
	*g = (float)dg;
	*b = (float)db;
	atto_redraw();
	return result;
}

void atto_beep(){
	fl_beep();
}

void on_debug_failure(const char *file, int line){
	char message[800];
	fprintf(stderr, "Condition failed:\nline: %i\n file:%s\n", line, file);
	sprintf(message, "Condition failed:\nline: %i\n file:%s\n", line, file);
	atto_message(message);
}


